@page "/"
@inject INoteDataService noteService;
@inherits CommunicationBaseComponent
@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="main-color side-row top-row">
    <TopMenu OnSearch="OnSearch" TotalNotes="totalNotes" />
</div>
<div class="d-flex flex-column content main-layout">
    <div class="d-flex flex-column p-3 notes-area">
        @foreach (var note in notes)
        {
            <Note NoteData="note" />
        }
    </div>
    <PagePagination CurrentPageNumber="currentPageNumber" TotalPages="totalPages" OnChangePage="OnChangePage" />
</div>

@code {
    protected int pageSize = 10;
    protected int currentPageNumber = 1;
    protected int totalPages;
    protected int totalNotes;
    protected string searchTerm = default!;
    protected IEnumerable<NoteData> notes = new List<NoteData>();

    protected event Action<string> OnSearch = default!;
    protected event Action<int> OnChangePage = default!;

    protected override void OnInitialized()
    {
        OnSearch += SearchTerm;
        OnChangePage += ChangePage;
        DefineNotes();
    }
    protected override async void OnReceiveStackChanged()
    {
        if (CheckIfUpdateNotes())
        {
            DefineNotes();
            await InvokeAsync(StateHasChanged);
        }
    }
    private void ChangePage(int page)
    {
        currentPageNumber = page;
        DefineNotes();
    }
    private async void SearchTerm(string term)
    {
        try
        {
            searchTerm = term;
            DefineNotes();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.Error(ex.Message);
        }
    }
    protected void DefineNotes()
    {
        if (!string.IsNullOrEmpty(searchTerm))
            GetNotesOnCurrentPageWithText();
        else
            GetNotesOnCurrentPage();
    }
    private async void GetNotesOnCurrentPage()
    {
        try
        {
            totalPages = GetTotalPages();
            notes = noteService.GetNotesOnPage(currentPageNumber, pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.Error(ex.Message);
        }
    }
    private async void GetNotesOnCurrentPageWithText()
    {
        try
        {
            totalPages = GetTotalPagesWithText();
            notes = noteService.GetNotesWithTextOnPage(searchTerm, currentPageNumber, pageSize);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.Error(ex.Message);
        }
    }
    private int GetTotalPages()
    {
        totalNotes = noteService.GetTotalNotesCount();
        return (int)Math.Ceiling((double)totalNotes / pageSize);
    }
    private int GetTotalPagesWithText()
    {
        totalNotes = noteService.GetTotalNotesCountWithText(searchTerm);
        return (int)Math.Ceiling((double)totalNotes / pageSize);
    }
    private bool CheckIfUpdateNotes() => currentPageNumber == 1;
}